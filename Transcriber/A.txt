//
//  ContentView.swift
//  VoxScribe
//
//  Created by Turann_ on 30.03.2025.
//

//
//  ContentView.swift
//  VoxScribe
//

import SwiftUI
import TranscriptionKit

struct ContentView: View {
    @State private var transcriptions: [TranscriptionItem] = []
    @State private var isRecording = false
    @State private var currentTranscription: String = ""
    @Environment(\.horizontalSizeClass) private var horizontalSizeClass
    
    private let speechRecognizer = SpeechRecognizer()
    
    var body: some View {
        GeometryReader { geometry in
            HStack(spacing: 0) {
                // Left Panel - Controls & Live Transcription
                VStack {
                    recordingControls
                    liveTranscriptionView
                    Spacer()
                }
                .frame(width: panelWidth(for: geometry))
                .background(Color(.systemGray6))
                
                // Right Panel - History (Regular width only)
                if horizontalSizeClass == .regular {
                    historyPanel
                        .frame(width: geometry.size.width * 0.6)
                }
            }
            .onAppear {
                loadTranscriptions()
            }
        }
    }
    
    // MARK: - View Components
    private var recordingControls: some View {
        Button(action: toggleRecording) {
            Text(isRecording ? "Stop Recording" : "Start Recording")
                .font(.headline)
                .foregroundColor(.white)
                .padding()
                .frame(maxWidth: .infinity)
                .background(isRecording ? Color.red : Color.blue)
                .cornerRadius(10)
        }
        .padding()
    }
    
    private var liveTranscriptionView: some View {
        ScrollView {
            Text(currentTranscription)
                .frame(maxWidth: .infinity, alignment: .leading)
                .padding()
        }
        .background(Color(.secondarySystemBackground))
        .cornerRadius(10)
        .padding(.horizontal)
    }
    
    private var historyPanel: some View {
        VStack {
            if transcriptions.isEmpty {
                emptyStateView
            } else {
                transcriptionListView
            }
            Spacer()
        }
        .padding()
        .background(Color(.systemBackground))
    }
    
    private var emptyStateView: some View {
        VStack {
            Spacer()
            Text("No transcriptions yet")
                .foregroundColor(.secondary)
            Text("Start recording to create your first transcription")
                .foregroundColor(.secondary)
            Spacer()
        }
    }
    
    private var transcriptionListView: some View {
        ScrollView {
            LazyVStack(spacing: 12) {
                ForEach(transcriptions) { transcription in
                    TranscriptionCard(
                        transcription: transcription,
                        onDelete: { deleteTranscription(transcription) },
                        onToggleStar: { toggleStar(for: transcription) },
                        onExport: { FileManager.shared.exportTranscription(transcription) }
                    )
                }
            }
            .padding(.horizontal)
        }
    }
    
    // MARK: - Recording Logic
    private func toggleRecording() {
        isRecording ? stopRecording() : startRecording()
    }
    
    private func startRecording() {
        Task {
                try await speechRecognizer.startTranscribing()
                isRecording = true
                await monitorTranscriptions()
        }
    }
    
    private func stopRecording() {
        speechRecognizer.stopTranscribing()
        isRecording = false
        saveCurrentTranscription()
    }
    
    private func monitorTranscriptions() async {
        for await transcript in speechRecognizer.transcriptions {
            await MainActor.run {
                currentTranscription = transcript
            }
        }
    }
    
    private func saveCurrentTranscription() {
        guard !currentTranscription.isEmpty else { return }
        
        let newItem = TranscriptionItem(
            text: currentTranscription,
            date: Date()
        )
        
        transcriptions.insert(newItem, at: 0)
        saveTranscriptions()
        currentTranscription = ""
    }
    
    // MARK: - Persistence
    private func saveTranscriptions() {
        do {
            let data = try JSONEncoder().encode(transcriptions)
            UserDefaults.standard.set(data, forKey: "SavedTranscriptions")
        } catch {
            print("Error saving transcriptions: \(error)")
        }
    }
    
    private func loadTranscriptions() {
        guard let data = UserDefaults.standard.data(forKey: "SavedTranscriptions") else { return }
        
        do {
            transcriptions = try JSONDecoder().decode([TranscriptionItem].self, from: data)
        } catch {
            print("Error loading transcriptions: \(error)")
        }
    }
    
    // MARK: - Transcription Management
    private func deleteTranscription(_ transcription: TranscriptionItem) {
        transcriptions.removeAll { $0.id == transcription.id }
        saveTranscriptions()
    }
    
    private func toggleStar(for transcription: TranscriptionItem) {
        guard let index = transcriptions.firstIndex(where: { $0.id == transcription.id }) else { return }
        transcriptions[index].isStarred.toggle()
        saveTranscriptions()
    }
    
    private func handleError(_ error: Error) {
        print("Error: \(error.localizedDescription)")
        currentTranscription = "Error: \(error.localizedDescription)"
    }
    
    // MARK: - Layout Calculations
    private func panelWidth(for geometry: GeometryProxy) -> CGFloat {
        horizontalSizeClass == .regular ? geometry.size.width * 0.4 : geometry.size.width
    }
}

// MARK: - Transcription Card View
struct TranscriptionCard: View {
    let transcription: TranscriptionItem
    let onDelete: () -> Void
    let onToggleStar: () -> Void
    let onExport: () -> Void
    
    @State private var isExpanded = false
    
    private var dateString: String {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .short
        return formatter.string(from: transcription.date)
    }
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text(dateString)
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                
                Spacer()
                
                Button(action: onToggleStar) {
                    Image(systemName: transcription.isStarred ? "star.fill" : "star")
                        .foregroundColor(transcription.isStarred ? .yellow : .gray)
                }
                
                Menu {
                    Button(action: onExport) {
                        Label("Export", systemImage: "square.and.arrow.up")
                    }
                    Button(role: .destructive, action: onDelete) {
                        Label("Delete", systemImage: "trash")
                    }
                } label: {
                    Image(systemName: "ellipsis.circle")
                }
            }
            
            Text(transcription.text)
                .lineLimit(isExpanded ? nil : 3)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            if transcription.text.count > 100 {
                Button {
                    isExpanded.toggle()
                } label: {
                    Text(isExpanded ? "Show Less" : "Show More")
                        .font(.caption)
                        .foregroundColor(.blue)
                }
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(transcription.isStarred ? Color.yellow.opacity(0.1) : Color(.secondarySystemBackground))
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(Color.gray.opacity(0.2), lineWidth: 1)
                )
        )
    }
}

// MARK: - Preview
#Preview {
    ContentView()
}
